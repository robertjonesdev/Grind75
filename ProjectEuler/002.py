# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four
# million, find the sum of the even-valued terms.

from functools import reduce


def fibonacci_iterative(n):
    """Generator of fibonacci values from 1 to n"""
    if n <= 0:
        return

    fib_sequence = [0, 1]
    if n == 1:
        yield fib_sequence[0]
    elif n >= 2:
        yield fib_sequence[0]
        yield fib_sequence[1]
        while fib_sequence[-1] <= n:
            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
            yield fib_sequence[-1]


def is_even(num):
    """Returns true if num is even, false otherwise.

    Returns: Boolean
    """
    return num & 1 == 0


LIMIT = 4000000

sum_of_even_fibonacci_sequence = reduce(
    lambda accumulator, val: accumulator + val,
    filter(is_even, fibonacci_iterative(LIMIT)),
)

print(
    f"Sum of even fibonnaci_sequence from 1 to {LIMIT} is {sum_of_even_fibonacci_sequence}"
)
